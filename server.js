import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { getConnection } from "./db.js";
import bcrypt from "bcryptjs";
import nodemailer from "nodemailer";
import { locations } from "./locations.js";
import { jsPDF } from "jspdf";
import 'jspdf-autotable';
import lineRoutes from "./routes/lineRoutes.js";
import lineService from "./services/lineService.js";

dotenv.config();
const app = express();

// CORS configuration - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Local ‡πÅ‡∏•‡∏∞ Production
const isProduction = process.env.NODE_ENV === 'production';
const isRailway = process.env.RAILWAY_PUBLIC_DOMAIN;

const allowedOrigins = [
  process.env.FRONTEND_URL || "http://localhost:5173",
  "http://localhost:5173",
  "http://localhost:5174", 
  "http://localhost:5175",
  "http://localhost:5176",
  "https://frontend-production-a002.up.railway.app"
];

// ‡πÄ‡∏û‡∏¥‡πà‡∏° Production domains
if (isProduction || isRailway) {
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Railway domain
  if (process.env.RAILWAY_PUBLIC_DOMAIN) {
    allowedOrigins.push(`https://${process.env.RAILWAY_PUBLIC_DOMAIN}`);
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° custom domain ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  if (process.env.CUSTOM_DOMAIN) {
    allowedOrigins.push(`https://${process.env.CUSTOM_DOMAIN}`);
  }
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Frontend production domain
  if (process.env.FRONTEND_URL && process.env.FRONTEND_URL.startsWith('https://')) {
    allowedOrigins.push(process.env.FRONTEND_URL);
  }
}

app.use(cors({ 
  origin: allowedOrigins,
  credentials: true 
}));

// CORS logging for debugging
app.use((req, res, next) => {
  const origin = req.headers.origin;
  console.log(`üåê CORS Request from: ${origin}`);
  console.log(`‚úÖ Allowed origins:`, allowedOrigins);
  console.log(`üîç Origin allowed:`, allowedOrigins.includes(origin));
  next();
});
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));



// ==================== Nodemailer ====================
const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST,
  port: process.env.EMAIL_PORT,
  secure: false,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// ==================== Users ====================
// ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Staff ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
app.get("/users", async (req, res) => {
  try {
    const connection = await getConnection();
    const [users] = await connection.query(
      "SELECT id, name, email FROM users WHERE role_id = 1 AND is_active = 1"
    );
    await connection.end();
    res.json(users);
  } catch (err) {
    console.error("Get users error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£)
app.get("/admin/users", async (req, res) => {
  try {
    const connection = await getConnection();
    const [users] = await connection.query(
      "SELECT id, name, email, role_id, is_active, created_at FROM users ORDER BY created_at DESC"
    );
    await connection.end();
    res.json(users);
  } catch (err) {
    console.error("Get all users error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
app.put("/admin/users/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email, role_id, is_active } = req.body;
    const connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const [[user]] = await connection.query("SELECT * FROM users WHERE id = ?", [id]);
    if (!user) {
      await connection.end();
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await connection.query(
      "UPDATE users SET name = ?, email = ?, role_id = ?, is_active = ? WHERE id = ?",
      [name, email, role_id, is_active, id]
    );

    await connection.end();
    res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("Update user error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
app.post("/admin/users", async (req, res) => {
  try {
    const { name, email, password, role_id } = req.body;
    const connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [[existing]] = await connection.query("SELECT * FROM users WHERE email = ?", [email]);
    if (existing) {
      await connection.end();
      return res.status(400).json({ success: false, message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
    }

    // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const hashedPassword = await bcrypt.hash(password, 10);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
    const [result] = await connection.query(
      "INSERT INTO users (name, email, password, role_id, is_active) VALUES (?, ?, ?, ?, 1)",
      [name, email, hashedPassword, role_id]
    );

    await connection.end();
    res.json({ success: true, message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", userId: result.insertId });
  } catch (err) {
    console.error("Create user error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
app.delete("/admin/users/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const [[user]] = await connection.query("SELECT * FROM users WHERE id = ?", [id]);
    if (!user) {
      await connection.end();
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    // ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    await connection.query("DELETE FROM users WHERE id = ?", [id]);

    await connection.end();
    res.json({ success: true, message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("Delete user error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});
// ==================== Locations ====================
app.get("/locations", (req, res) => {
  res.json(locations);
});

// ==================== LINE Integration ====================
app.use("/api/line", lineRoutes);

// ==================== Login ====================
app.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const connection = await getConnection();
    const [[user]] = await connection.query(`SELECT * FROM users WHERE email = ?`, [email]);

    if (!user) {
      await connection.end();
      return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      await connection.end();
      return res.status(400).json({ success: false, message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    let roleLabel = "user";
    if (user.role_id === 2) roleLabel = "staff";
    if (user.role_id === 3) roleLabel = "admin";

    await connection.end();

    res.json({
      success: true,
      message: "‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: roleLabel,
      }
    });
  } catch (err) {
    console.error("Login error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// ==================== Register ====================
app.post("/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const connection = await getConnection();

    const [[existing]] = await connection.query(`SELECT * FROM users WHERE email = ?`, [email]);
    if (existing) {
      await connection.end();
      return res.status(400).json({ success: false, message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const [result] = await connection.query(
      `INSERT INTO users (name, email, password, role_id, is_active) VALUES (?, ?, ?, 1, 0)`,
      [name, email, hashedPassword]
    );

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000);

    await connection.query(
      `INSERT INTO email_otps (user_id, otp, type, expires_at) VALUES (?, ?, 'register', ?)`,
      [result.insertId, otp, expiresAt]
    );

    await transporter.sendMail({
      from: `"Shuttle System" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "OTP ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå",
      text: `‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ${otp} (‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ 10 ‡∏ô‡∏≤‡∏ó‡∏µ)`,
    });

    await connection.end();
    res.json({ success: true, message: "‡∏™‡πà‡∏á OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢" });
  } catch (err) {
    console.error("Register error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// ==================== Verify OTP ====================
app.post("/verify-otp", async (req, res) => {
  try {
    const { email, otpInput } = req.body;
    const connection = await getConnection();

    const [[user]] = await connection.query(`SELECT * FROM users WHERE email = ?`, [email]);
    if (!user) {
      await connection.end();
      return res.status(400).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" });
    }

    const [[otpRow]] = await connection.query(
      `SELECT * FROM email_otps WHERE user_id = ? AND otp = ? AND type='register' AND is_used=0 AND expires_at>NOW()`,
      [user.id, otpInput]
    );

    if (!otpRow) {
      await connection.end();
      return res.status(400).json({ success: false, message: "OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
    }

    await connection.query(`UPDATE users SET is_active=1 WHERE id=?`, [user.id]);
    await connection.query(`UPDATE email_otps SET is_used=1 WHERE id=?`, [otpRow.id]);

    await connection.end();
    res.json({ success: true, message: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("Verify OTP error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// ==================== Profile ====================
app.get("/profile/:id", async (req, res) => {
  const { id } = req.params;
  const connection = await getConnection();
  const [[user]] = await connection.query("SELECT id, name, email FROM users WHERE id = ?", [id]);
  await connection.end();
  res.json(user);
});

app.put("/profile/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { name, email, type, currentPassword, newPassword } = req.body;
    const connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const [[user]] = await connection.query("SELECT * FROM users WHERE id = ?", [id]);
    if (!user) {
      await connection.end();
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    if (type === 'password') {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      if (!currentPassword || !newPassword) {
        await connection.end();
        return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà" });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const isMatch = await bcrypt.compare(currentPassword, user.password);
      if (!isMatch) {
        await connection.end();
        return res.status(400).json({ success: false, message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      }

      // ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
      const hashedPassword = await bcrypt.hash(newPassword, 10);
      await connection.query("UPDATE users SET password=? WHERE id=?", [hashedPassword, id]);
      
      await connection.end();
      res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } else if (type === 'delete') {
      // ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ (soft delete)
      await connection.query("UPDATE users SET is_active=0 WHERE id=?", [id]);
      
      await connection.end();
      res.json({ success: true, message: "‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } else {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      if (!name || !email) {
        await connection.end();
        return res.status(400).json({ success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•" });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
      const [[existing]] = await connection.query("SELECT * FROM users WHERE email = ? AND id != ?", [email, id]);
      if (existing) {
        await connection.end();
        return res.status(400).json({ success: false, message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
      }

      await connection.query("UPDATE users SET name=?, email=? WHERE id=?", [name, email, id]);
      
      await connection.end();
      res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
  } catch (err) {
    console.error("Update profile error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// =================== Appointments =================== //
function mapLocationIdsToNames(data, provinces, districts, subdistricts, hospitals) {
  const provinceName = provinces.find(p => String(p.id) === String(data.provinceId))?.name_th || "";
  const districtName = districts.find(d => String(d.id) === String(data.districtId))?.name_th || "";
  const subdistrictName = subdistricts.find(s => String(s.id) === String(data.subdistrictId))?.name_th || "";
  const hospitalName = hospitals.find(h => String(h.id) === String(data.hospitalId))?.name || "";
  return { provinceName, districtName, subdistrictName, hospitalName };
}


app.post("/appointments/user/:userId", async (req, res) => {
  try {
    const payload = req.body; // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® payload ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    const { userId } = req.params;
    const connection = await getConnection();

    // Debug logs (remove in production)
    if (process.env.NODE_ENV === 'development') {
      console.log("Status being inserted:", `"${"‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"}"`);
      console.log("Payload:", payload);
    }

    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏ï‡∏≥‡∏ö‡∏•/‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏≤‡∏Å payload
    const provinceName = payload.provinceName;
    const districtName = payload.districtName;
    const subdistrictName = payload.subdistrictName;
    const hospitalName = payload.hospitalName;

    const [result] = await connection.query(
      `INSERT INTO appointments (
        user_id, first_name, last_name, phone,
        province, district, subdistrict, hospital,
        appointment_date, appointment_time, latitude, longitude, status
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        userId,
        payload.firstName,
        payload.lastName,
        payload.phone,
        provinceName,
        districtName,
        subdistrictName,
        hospitalName,
        payload.appointmentDate,
        payload.appointmentTime,
        payload.latitude,
        payload.longitude,
        payload.status || "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      ]
    );

    await connection.end();
    res.json({ success: true, appointmentId: result.insertId });
  } catch (err) {
    console.error("Create appointment (user) error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// =================== Create Appointment (Staff) =================== //
app.post("/appointments/staff", async (req, res) => {
  try {
    const payload = req.body;
    const connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ staff ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÑ‡∏´‡∏ô
    if (!payload.userId) {
      await connection.end();
      return res.status(400).json({ success: false, message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ userId ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡πÅ‡∏ó‡∏ô" });
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å
    // Debug logs (remove in production)
    if (process.env.NODE_ENV === 'development') {
      console.log("Staff creating appointment for user:", payload.userId);
      console.log("Payload:", payload);
    }

    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏ï‡∏≥‡∏ö‡∏•/‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏≤‡∏Å payload
    const provinceName = payload.provinceName;
    const districtName = payload.districtName;
    const subdistrictName = payload.subdistrictName;
    const hospitalName = payload.hospitalName;

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
    const formattedDate = new Date(payload.appointmentDate)
      .toISOString()
      .split("T")[0];

    const [result] = await connection.query(
      `INSERT INTO appointments (
        user_id, first_name, last_name, phone,
        province, district, subdistrict, hospital,
        appointment_date, appointment_time, latitude, longitude, status
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        payload.userId,
        payload.fullName || payload.firstName || "",
        payload.lastName || "",
        payload.phone,
        provinceName,
        districtName,
        subdistrictName,
        hospitalName,
        formattedDate,
        payload.appointmentTime,
        payload.latitude || null,
        payload.longitude || null,
        payload.status || "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      ]
    );

    await connection.end();
    res.json({ success: true, appointmentId: result.insertId });
  } catch (err) {
    console.error("Create appointment (staff) error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});



// =================== Update / Staff / Admin =================== //
// Update, Staff, Admin routes ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå

// Update appointment
app.put("/appointments/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const data = req.body;
    const connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
    const [[appointment]] = await connection.query(
      "SELECT * FROM appointments WHERE id = ?",
      [id]
    );

    if (!appointment) {
      await connection.end();
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (appointment.status !== "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") {
      await connection.end();
      return res
        .status(400)
        .json({ success: false, message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'" });
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
    const formattedDate = new Date(
      data.appointment_date || data.appointmentDate
    )
      .toISOString()
      .split("T")[0];

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (latitude, longitude)
    const latitude = parseFloat(data.latitude) || null;
    const longitude = parseFloat(data.longitude) || null;

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await connection.query(
      `UPDATE appointments SET
        first_name = ?,
        last_name = ?,
        phone = ?,
        province = ?,
        district = ?,
        subdistrict = ?,
        hospital = ?,
        appointment_date = ?,
        appointment_time = ?,
        latitude = ?,
        longitude = ?
       WHERE id = ?`,
      [
        data.fullName || data.first_name || data.firstName || "",
        data.last_name || data.lastName || "",
        data.phone,
        data.province,
        data.district,
        data.subdistrict,
        data.hospital,
        formattedDate,
        data.appointment_time || data.appointmentTime,
        latitude,
        longitude,
        Number(id),
      ]
    );

    await connection.end();
    res.json({ success: true, message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("Update appointment error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});



// Admin update status (simplified)
app.put("/admin/appointments/:id/status", async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    const connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    if (!["‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"].includes(status)) {
      await connection.end();
      return res.status(400).json({ success: false, message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const [[appointment]] = await connection.query("SELECT * FROM appointments WHERE id = ?", [id]);
    if (!appointment) {
      await connection.end();
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    await connection.query("UPDATE appointments SET status=? WHERE id=?", [status, id]);

    await connection.end();
    
    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE
    try {
      let notificationType;
      if (status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß') {
        notificationType = 'appointment_approved';
      } else if (status === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á') {
        notificationType = 'appointment_rejected';
      }
      
      if (notificationType) {
        await lineService.sendAppointmentNotification(appointment.user_id, id, notificationType);
      }
    } catch (lineError) {
      console.error('LINE notification error:', lineError);
      // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }
    
    res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("Update appointment status error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// Admin update status (legacy - keep for backward compatibility)
app.put("/appointments/status/:adminId/:appointmentId", async (req, res) => {
  try {
    const { adminId, appointmentId } = req.params;
    const { newStatus } = req.body;
    const connection = await getConnection();

    const [[admin]] = await connection.query("SELECT role_id FROM users WHERE id=?", [adminId]);
    if (!admin || admin.role_id !== 3) {
      await connection.end();
      return res.status(403).json({ success: false, message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
    }

    if (!["‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß", "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"].includes(newStatus)) {
      await connection.end();
      return res.status(400).json({ success: false, message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    await connection.query("UPDATE appointments SET status=? WHERE id=?", [newStatus, appointmentId]);

    await connection.end();
    res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("Update appointment status error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// =================== All Appointments (Staff/Admin) =================== //
app.get("/appointments", async (req, res) => {
  try {
    const { page = 1, limit = 10, status = '', search = '' } = req.query;
    const connection = await getConnection();

    // Build WHERE clause
    let whereClause = "1=1";
    let params = [];

    if (status) {
      whereClause += " AND status = ?";
      params.push(status);
    }

    if (search) {
      whereClause += " AND (first_name LIKE ? OR last_name LIKE ? OR phone LIKE ? OR hospital LIKE ?)";
      const searchPattern = `%${search}%`;
      params.push(searchPattern, searchPattern, searchPattern, searchPattern);
    }

    // Get total count
    const [countResult] = await connection.query(
      `SELECT COUNT(*) as total FROM appointments WHERE ${whereClause}`,
      params
    );
    const total = countResult[0].total;

    // Calculate pagination
    const offset = (page - 1) * limit;
    const totalPages = Math.ceil(total / limit);

    // Get appointments with pagination
    const [appointments] = await connection.query(
      `SELECT id, user_id, first_name, last_name, phone, province, district, subdistrict, hospital, 
              appointment_date, appointment_time, latitude, longitude, status, created_at
       FROM appointments 
       WHERE ${whereClause}
       ORDER BY appointment_date DESC, appointment_time DESC
       LIMIT ? OFFSET ?`,
      [...params, parseInt(limit), offset]
    );

    await connection.end();
    res.json({
      appointments,
      total,
      totalPages,
      currentPage: parseInt(page),
      limit: parseInt(limit)
    });
  } catch (err) {
    console.error("Get all appointments error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// =================== User Appointments =================== //
app.get("/appointments/user/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const connection = await getConnection();

    const [appointments] = await connection.query(
      `SELECT id, first_name, last_name, phone, province, district, subdistrict, hospital, 
              appointment_date, appointment_time, latitude, longitude, status, created_at
       FROM appointments 
       WHERE user_id = ?
       ORDER BY appointment_date DESC, appointment_time DESC`,
      [userId]
    );

    await connection.end();
    res.json(appointments);
  } catch (err) {
    console.error("Get user appointments error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// Note: Duplicate route removed - using the first PUT /appointments/:id route above


// =================== Get single appointment =================== //
app.get("/appointments/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const connection = await getConnection();

    const [[appointment]] = await connection.query(
      `SELECT id, first_name, last_name, phone, province, district, subdistrict, hospital, 
              appointment_date, appointment_time, latitude, longitude, status, created_at
       FROM appointments 
       WHERE id = ?`,
      [id]
    );

    await connection.end();

    if (!appointment) {
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
    }

    res.json(appointment);
  } catch (err) {
    console.error("Get appointment error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// =================== Delete Appointment =================== //
app.delete("/appointments/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const [[appointment]] = await connection.query(
      "SELECT * FROM appointments WHERE id = ?",
      [id]
    );

    if (!appointment) {
      await connection.end();
      return res.status(404).json({ success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    if (appointment.status !== "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") {
      await connection.end();
      return res.status(400).json({ 
        success: false, 
        message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'" 
      });
    }

    // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    await connection.query("DELETE FROM appointments WHERE id = ?", [id]);

    await connection.end();
    res.json({ success: true, message: "‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("Delete appointment error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
app.get("/locations/provinces", async (req, res) => {
  const connection = await getConnection();
  const [provinces] = await connection.query(
    "SELECT DISTINCT province AS name FROM appointments ORDER BY province"
  );
  await connection.end();
  res.json(provinces.map(p => p.name));
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
app.get("/locations/districts/:province", async (req, res) => {
  const { province } = req.params;
  const connection = await getConnection();
  const [districts] = await connection.query(
    "SELECT DISTINCT district AS name FROM appointments WHERE province = ? ORDER BY district",
    [province]
  );
  await connection.end();
  res.json(districts.map(d => d.name));
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡∏ö‡∏•‡∏ï‡∏≤‡∏°‡∏≠‡∏≥‡πÄ‡∏†‡∏≠
app.get("/locations/subdistricts/:district", async (req, res) => {
  const { district } = req.params;
  const connection = await getConnection();
  const [subdistricts] = await connection.query(
    "SELECT DISTINCT subdistrict AS name FROM appointments WHERE district = ? ORDER BY subdistrict",
    [district]
  );
  await connection.end();
  res.json(subdistricts.map(s => s.name));
});

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
app.get("/locations/hospitals", async (req, res) => {
  const connection = await getConnection();
  const [hospitals] = await connection.query(
    "SELECT DISTINCT hospital AS name FROM appointments ORDER BY hospital"
  );
  await connection.end();
  res.json(hospitals.map(h => h.name));
});

// =================== Statistics & Reports =================== //
// ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
app.get("/admin/statistics", async (req, res) => {
  try {
    const { period = 'month' } = req.query; // day, week, month, year
    const connection = await getConnection();

    let dateFilter = "";
    const now = new Date();
    
    switch (period) {
      case 'day':
        dateFilter = "DATE(appointments.created_at) = CURDATE()";
        break;
      case 'week':
        dateFilter = "appointments.created_at >= DATE_SUB(NOW(), INTERVAL 1 WEEK)";
        break;
      case 'month':
        dateFilter = "appointments.created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)";
        break;
      case 'year':
        dateFilter = "appointments.created_at >= DATE_SUB(NOW(), INTERVAL 1 YEAR)";
        break;
      default:
        dateFilter = "appointments.created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)";
    }

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const [appointmentStats] = await connection.query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN status = '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' THEN 1 ELSE 0 END) as pending,
        SUM(CASE WHEN status = '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' THEN 1 ELSE 0 END) as approved,
        SUM(CASE WHEN status = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' THEN 1 ELSE 0 END) as cancelled
      FROM appointments 
      WHERE ${dateFilter}
    `);

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const [userStats] = await connection.query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN role_id = 1 THEN 1 ELSE 0 END) as regular_users,
        SUM(CASE WHEN role_id = 2 THEN 1 ELSE 0 END) as staff_users,
        SUM(CASE WHEN role_id = 3 THEN 1 ELSE 0 END) as admin_users
      FROM users 
      WHERE is_active = 1
    `);

    // ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
    const [weeklyStats] = await connection.query(`
      SELECT 
        DAYNAME(appointment_date) as day_name,
        COUNT(*) as count
      FROM appointments 
      WHERE ${dateFilter}
      GROUP BY DAYOFWEEK(appointment_date), DAYNAME(appointment_date)
      ORDER BY DAYOFWEEK(appointment_date)
    `);

    await connection.end();
    
    res.json({
      success: true,
      data: {
        period,
        appointments: appointmentStats[0],
        users: userStats[0],
        weeklyDistribution: weeklyStats
      }
    });
  } catch (err) {
    console.error("Get statistics error:", err);
    res.status(500).json({ success: false, message: err.message });
  }
});

// =================== System Health Check =================== //
app.get("/health", async (req, res) => {
  try {
    const connection = await getConnection();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [result] = await connection.query("SELECT 1 as health_check");
    await connection.end();
    
    res.json({
      success: true,
      status: "healthy",
      timestamp: new Date().toISOString(),
      services: {
        database: "connected",
        api: "running",
        email: process.env.EMAIL_HOST ? "configured" : "not_configured"
      }
    });
  } catch (err) {
    console.error("Health check error:", err);
    res.status(500).json({
      success: false,
      status: "unhealthy",
      timestamp: new Date().toISOString(),
      error: err.message
    });
  }
});


// =================== PDF Report Generation =================== //
app.get("/admin/reports/pdf", async (req, res) => {
  try {
    const { period = 'month' } = req.query;
    console.log("PDF Report Request - Period:", period);
    
    
    const connection = await getConnection();

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    let dateFilter = "";
    switch (period) {
      case 'day':
        dateFilter = "DATE(appointments.created_at) = CURDATE()";
        break;
      case 'week':
        dateFilter = "appointments.created_at >= DATE_SUB(NOW(), INTERVAL 1 WEEK)";
        break;
      case 'month':
        dateFilter = "appointments.created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)";
        break;
      case 'year':
        dateFilter = "appointments.created_at >= DATE_SUB(NOW(), INTERVAL 1 YEAR)";
        break;
      default:
        dateFilter = "appointments.created_at >= DATE_SUB(NOW(), INTERVAL 1 MONTH)";
    }

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const [appointmentStats] = await connection.query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN status = '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' THEN 1 ELSE 0 END) as pending,
        SUM(CASE WHEN status = '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' THEN 1 ELSE 0 END) as approved,
        SUM(CASE WHEN status = '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á' THEN 1 ELSE 0 END) as cancelled
      FROM appointments 
      WHERE ${dateFilter}
    `);

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const [userStats] = await connection.query(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN role_id = 1 THEN 1 ELSE 0 END) as regular_users,
        SUM(CASE WHEN role_id = 2 THEN 1 ELSE 0 END) as staff_users,
        SUM(CASE WHEN role_id = 3 THEN 1 ELSE 0 END) as admin_users
      FROM users 
      WHERE is_active = 1
    `);

    // ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [recentAppointments] = await connection.query(`
      SELECT 
        a.id, a.first_name, a.last_name, a.phone, a.hospital,
        a.appointment_date, a.appointment_time, a.status, a.created_at,
        u.name as user_name
      FROM appointments a
      LEFT JOIN users u ON a.user_id = u.id
      WHERE ${dateFilter.replace('appointments.created_at', 'a.created_at')}
      ORDER BY a.created_at DESC
      LIMIT 20
    `);

    await connection.end();


    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
    const doc = new jsPDF();
    
    // Header
    doc.setFontSize(18);
    doc.setFont('helvetica', 'bold');
    doc.text('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏£‡∏ñ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', 20, 20);
    
    // Report Info
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    
    const periodText = {
      'day': '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
      'week': '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå', 
      'month': '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      'year': '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ'
    };
    
    doc.text(periodText[period] || '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 20, 35);
    doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: ${new Date().toLocaleDateString('th-TH')}`, 20, 45);
    doc.text(`‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleTimeString('th-TH')}`, 20, 55);

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    let yPos = 75;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á', 20, yPos);
    
    yPos += 15;
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    const stats = appointmentStats[0];
    doc.text(`‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 30, yPos);
    yPos += 10;
    doc.text(`‚Ä¢ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${stats.pending} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 30, yPos);
    yPos += 10;
    doc.text(`‚Ä¢ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß: ${stats.approved} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 30, yPos);
    yPos += 10;
    doc.text(`‚Ä¢ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å: ${stats.cancelled} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 30, yPos);

    // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    yPos += 20;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', 20, yPos);
    
    yPos += 15;
    doc.setFontSize(11);
    doc.setFont('helvetica', 'normal');
    
    const userStatsData = userStats[0];
    doc.text(`‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${userStatsData.total} ‡∏Ñ‡∏ô`, 30, yPos);
    yPos += 10;
    doc.text(`‚Ä¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ${userStatsData.regular_users} ‡∏Ñ‡∏ô`, 30, yPos);
    yPos += 10;
    doc.text(`‚Ä¢ ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ${userStatsData.staff_users} ‡∏Ñ‡∏ô`, 30, yPos);
    yPos += 10;
    doc.text(`‚Ä¢ ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö: ${userStatsData.admin_users} ‡∏Ñ‡∏ô`, 30, yPos);

    // ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    yPos += 20;
    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å)', 20, yPos);
    
    yPos += 15;
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    
    // Table Header
    doc.setFont('helvetica', 'bold');
    doc.text('ID', 20, yPos);
    doc.text('‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', 30, yPos);
    doc.text('‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', 80, yPos);
    doc.text('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 130, yPos);
    doc.text('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 160, yPos);
    
    yPos += 10;
    doc.setFont('helvetica', 'normal');
    
    recentAppointments.slice(0, 20).forEach((apt, index) => {
      if (yPos > 250) {
        doc.addPage();
        yPos = 20;
      }
      
      doc.text(apt.id.toString(), 20, yPos);
      doc.text(`${apt.first_name} ${apt.last_name}`, 30, yPos);
      doc.text(apt.hospital || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏', 80, yPos);
      doc.text(new Date(apt.appointment_date).toLocaleDateString('th-TH'), 130, yPos);
      doc.text(apt.status, 160, yPos);
      
      yPos += 8;
    });

    // Footer
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text('‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏£‡∏ñ‡∏£‡∏±‡∏ö-‡∏™‡πà‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• | ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥', 20, 280);

    // ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå PDF
    const fileName = `report_${period}_${new Date().toISOString().split('T')[0]}.pdf`;
    
    // ‡πÉ‡∏ä‡πâ base64 encoding ‡πÅ‡∏ó‡∏ô arraybuffer
    const pdfBase64 = doc.output('datauristring');
    const pdfBuffer = Buffer.from(pdfBase64.split(',')[1], 'base64');
    
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
    res.setHeader('Content-Length', pdfBuffer.length);
    res.send(pdfBuffer);

  } catch (err) {
    console.error("PDF generation error:", err);
    res.status(500).json({ 
      success: false, 
      message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF ‡πÑ‡∏î‡πâ",
      error: err.message
    });
  }
});


const PORT = process.env.PORT || 3001;
const HOST = process.env.HOST || '0.0.0.0';

app.listen(PORT, HOST, () => {
  console.log(`üöÄ Server running on ${HOST}:${PORT}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üìä Frontend URL: ${process.env.FRONTEND_URL || 'http://localhost:5173'}`);
});
